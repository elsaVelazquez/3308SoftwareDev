Elsa Velazquez
Lab5


Software Dev Methods 3308

If you do not already have one, create a GitHub account
elsaVelazquez

2. Create a public git repository
add Repo button

3. Clone the repository to your local machine
clicked cline button then downloaded Windows Desktop version

4. Add and commit a simple README file with your name and the name of this
assignment.
git commit -m "simple readme file elsa lab5"
from Desktop clicked on file and "commit to master"

5. Add and commit a few other files (anything you want) to the repository
git add velazquez_lab_5.txt
git add samplehtmlfile_lab5.html
git add mydog.txt
git push
git push --set-upstream origin master
git status
git add . (too add them all at the same time)
git commit - m "Test commit"
git status




6. Create a tag named v0.0.1
git tag -a 1.0.0 -m "v.0.0"



7. Push all changes and tags to your remote repository (note that tags require a special
flag to be included in the push)
git push origin 1.0.0

8. Create and checkout a new branch named testing-new-files
9. Add and commit a few more files to this branch
10. Checkout the master branch
11. Edit and commit at least one of the files in this branch
12. Merge the testing-new-files branch into the master branch
13. Checkout the testing-new-files branch
14. Push all of your changes in both branches to your remote repository (make sure that
both branches show up on your remotes host)
15. Find a partner to work with
16. Grant this person/these people write access to your remote repository
17. Clone your partner’s remote repository to a new directory outside your original repository
18. Edit the README file in your partner’s master branch to list your name as ‘Partner:
<Your name here>’
19. Commit your changes
20. Push your changes to your partner’s remote repository
21. Return to your original repository (but do not pull from your remote branch yet)
22. Checkout your master branch
23. Edit your README file to add a line that says “This might cause a merge conflict”
24. Commit your changes.
25. Make sure that your partner has completed step 20 (pushed their changes to your
README)
26. Attempt to pull your partner’s changes to your repository
27. Resolve the merge conflict if one occurs
28. Commit the merge (assuming a conflict occurred)
29. Copy and paste the entry showing your merge resolution from the log into a text file
30. Push the merged changes back into your remote repo
Credit: To get credit for this lab exercise, show the TA your lab completion log which includes:
- Your name – Github account name
- Your partner’s name – Github account name
- The screenshots of the merge conflict and resolution.